---
- hosts: "biovel-portal:&apt"
  sudo: yes
  tasks:
    - name: "Install portal package dependencies"
      action: apt pkg={{ item }} state=present
      with_items:
        - libcurl4-gnutls-dev
        - libxml2-dev
        - libv8-dev
        - ruby
        - ruby-dev
        - ri
        - rubygems
        - git            # to obtain portal source code
        - python-mysqldb # required for Ansible mysql modules

- hosts: biovel-portal
  sudo: yes
  tasks:
    - name: Install Ruby gem bundler
      gem: name=bundler state=present

    - name: Add BioVeL Portal database
      mysql_db: name={{item}} state=present
      with_items:
        - tlite_test
        - tlite_dev
        - tlite_prod

    - name: Add BioVeL Portal database user
      mysql_user: name={{biovel_portal_db_user}} password={{biovel_portal_db_pass}} state=present
            "priv=tlite_prod.*:ALL/tlite_dev.*:ALL/tlite_test.*:ALL"

    - name: Create portal install directory
      file: name={{biovel_portal_install}} state=directory owner=www-data

    - name: create Portal log directory
      file: path={{biovel_portal_log}} state=directory owner=www-data

    - name: Get portal code
      sudo_user: www-data
      git: repo=https://github.com/BioVeL/portal.git dest={{biovel_portal_install}}
            version={{biovel_portal_git_version}}
      notify: restart portal

    - name: install Ruby dependencies using bundle
      # this command is effectively idempotent, as it does not do anything if the dependencies
      # are already installed, and it is fast when nothing needs to be done
      command: bundle install
          chdir={{biovel_portal_install}}

    - name: ensure production.rb exists
      sudo_user: www-data
      shell: cp '{{biovel_portal_install}}/config/environments/production.example.rb' '{{biovel_portal_install}}/config/environments/production.rb'
            creates='{{biovel_portal_install}}/config/environments/production.rb'

    - name: create site_keys.rb file
      template: src=site_keys.rb.j2 dest={{biovel_portal_install}}/config/initializers/site_keys.rb
          owner=www-data group=www-data mode=0600

    - name: configure portal password reset link
      sudo_user: www-data
      lineinfile: dest='{{biovel_portal_install}}/config/environments/production.rb'
            regexp='^ *config.action_mailer.default_url_options *='
            line='  config.action_mailer.default_url_options = { :host => "{{external_hostname}}" }'
            state=present backup=yes
      notify: restart portal

    - name: configure portal database connections
      sudo_user: www-data
      template: src=database.yml.j2 dest={{biovel_portal_install}}/config/database.yml mode=0600
      notify: restart portal

    - name: precompile assets
      # TODO - assets only get precompiled when application.js does not exist - it would be nice to
      # re-run it when the Git repository gets updated
      sudo_user: www-data
      command: bundle exec rake assets:precompile
            chdir={{biovel_portal_install}} creates={{biovel_portal_install}}/public/assets/application.js

    - name: setup data management script
      template: src=datactl.sh.j2 dest={{biovel_portal_install}}/datactl.sh owner=www-data mode=0700

    # To create the database, first check the current migration status
    - name: Checking status of database
      command: bundle exec rake RAILS_ENV=production db:migrate:status
            chdir={{biovel_portal_install}}
      register: biovel_portal_db_migration_status

    # If the database is empty (no migration status), and we have no data dump to initialise it,
    # the use db:setup (= db:schema:load followed by db:seed)
    - name: Create database seed file
      sudo_user: www-data
      template: src=seeds.rb.j2 dest={{biovel_portal_install}}/db/seeds.rb mode=0600

    - name: Initial setup of database
      command: bundle exec rake RAILS_ENV=production db:setup
            chdir={{biovel_portal_install}}
      when: "biovel_portal_initial_data == 'none' and 'Schema migrations table does not exist yet' in biovel_portal_db_migration_status.stdout"

    # If the database is empty and we have a dump from another portal, import it into the database
    - name: Copy data dump
      copy: src={{biovel_portal_initial_data}} dest={{biovel_portal_install}}/data.zip owner=www-data mode=0600
      when: "biovel_portal_initial_data != 'none' and 'Schema migrations table does not exist yet' in biovel_portal_db_migration_status.stdout"

    - name: Import data dump into database
      sudo_user: www-data
      command: "{{biovel_portal_install}}/datactl.sh load tlite_prod {{biovel_portal_install}}/data.zip"
      when: "biovel_portal_initial_data != 'none' and 'Schema migrations table does not exist yet' in biovel_portal_db_migration_status.stdout"

    - name: Delete data dump
      file: path={{biovel_portal_install}}/data.zip state=absent

    # Run migrate every time. After db:setup, it should do nothing. After a data import or if data already
    # exists, it will ensure that the database is at the right migration level for this version of the portal
    - name: setup databases
      sudo_user: www-data
      command: bundle exec rake RAILS_ENV=production db:migrate
            chdir={{biovel_portal_install}}

    # A third level of database manipulation - this primarily updates the server passwords if they
    # get changed in Ansible
    - name: setup database verification script
      template: src=dbcreate.sh.j2 dest={{biovel_portal_install}}/dbcreate.sh owner=root mode=0700

    - name: run database verification
      command: "{{biovel_portal_install}}/dbcreate.sh {{item}}"
      with_items:
        #- tlite_dev
        - tlite_prod

    - name: remove database verification script
      file: path={{biovel_portal_install}}/dbcreate.sh state=absent

    # TODO - we need to ensure these daemons are started at boot time
    # we also need to restart them if they are running. Easiest is just to
    # stop them start them. Stopping them if they are already stopped is OK.
    - name: stop daemons
      sudo_user: www-data
      command: rake RAILS_ENV=production daemons:stop
          chdir={{biovel_portal_install}}

    - name: start daemons
      sudo_user: www-data
      command: rake RAILS_ENV=production daemons:start
          chdir={{biovel_portal_install}}

    - name: install Passenger
      gem: name=passenger state=present

    - name: install Passenger into Apache
      shell: yes | passenger-install-apache2-module
          creates=/etc/apache2/mods-available/passenger.load
      # The output is almost unreadable due to extensive use of control characters
      # so we run two additional commands below to work out the correct values
      #register: passenger_apache

    - name: find Passenger base directory
      shell: ls -d /var/lib/gems/1.8/gems/passenger-*
      register: passenger_base

    - name: find Passenger module
      command: find {{passenger_base.stdout}} -name mod_passenger.so
      register: passenger_module

    - name: add Passenger configuration
      template: src={{item}}.j2 dest=/etc/apache2/mods-available/{{item}}
      with_items:
        - passenger.load
        - passenger.conf

    - name: enable Apache Passenger module
      command: a2enmod passenger
          creates=/etc/apache2/mods-enabled/passenger.load
      notify: restart portal

    - name: enable Apache Expires module
      # see http://guides.rubyonrails.org/asset_pipeline.html#far-future-expires-header
      command: a2enmod expires
          creates=/etc/apache2/mods-enabled/expires.load
      notify: restart portal

    - name: enable Apache Rewrite module
      command: a2enmod rewrite
          creates=/etc/apache2/mods-enabled/rewrite.load
      notify: restart portal

    - name: add Virtual Host to Apache
      template: src=vhost.j2 dest=/etc/apache2/sites-available/tlite
      notify: restart portal

    - name: disable default site
      command: a2dissite default
          removes=/etc/apache2/sites-enabled/000-default
      notify: restart portal

    - name: enable Portal site
      command: a2ensite tlite
          creates=/etc/apache2/sites-enabled/tlite
      notify: restart portal

  handlers:
    - name: restart portal
      service: name=apache2 state=restarted
