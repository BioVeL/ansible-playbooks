{% if apache_https["hostname"] != 'none' %}
{%   set secure_apache = True %}
{%   set apache_ports = [80, 443] %}
{% else %}
{%   set secure_apache = False %}
{%   set apache_ports = [80] %}
{% endif %}
{% if secure_apache %}
# We would like to redirect all traffic to the HTTPS port. However, runs
# that use interactions include non-HTTPS data objects.  Including these
# causes some browsers (Chrome, Firefox) to provide additional indications
# on the browser address bar.  Firefox 23 in particular, blocks the 
# non-HTTPS components, and users must unblock it manually.  As this is
# new and confusing to users, we workaround by providing user interaction
# pages in a non-HTTPS page.  Currently, this requires us to use non-HTTPS
# for /runs/*.  So, the HTTP port redirects to HTTPS except for /runs/*
# and the HTTPS port redirects to HTTP for /runs/*
#
# Use a temporary redirect. We want clients to keep checking the original
# URL to handle the case where we have a different hostname pointing to
# this server. e.g. portal.biovel.eu -> vers4.at.biovel.eu
#
# Due to the way HTTP redirects of a POST method get interpreted by clients
# (302 redirects to a GET, and (in some browsers) 307 prompts the user to
# re-post), redirects are problematic in a REST-like interface.  The Apache
# Redirect directive cannot distinguish HTTP methods.  In Apache 2.4 we could
# use <If> around a Redirect directive.  But, for Apache 2.2, we use the
# Rewrite directives instead.  This allows us to filter out POST requests so 
# they do not get redirected.  Since the problem being solved only occurs
# during the GET, this works fine.

{% endif %}
{% for apache_port in apache_ports %}
<VirtualHost *:{{apache_port}}>
{%   if secure_apache %}
    ServerName {{apache_https["hostname"]}}
{%   else %}
    ServerName {{external_hostname}}
{%   endif %}
    ServerAdmin {{sysadmin_email}}

{%   if secure_apache %}
    RewriteEngine On
{%     if apache_port == 80 %}
    # Redirect to HTTPS. We want to convert back to HTTPS as early as possible,
    # but we want to avoid redirecting Javascript, etc, and slowing down loading
    # of run pages. So only redirect on pages explicitly known to work using
    # HTTPS.
    #
    # Note that speed is not the only reason to avoid redirecting Javascript.
    # There was also a problem (SERVINF-396) where the redirection delayed
    # fetching a script, and an error occurred due to an undefined variable.
    # We didn't figure out why that would happen (Javascript evaluation occurs
    # in the listed order, even if redirection occurs), but not redirecting
    # fixed the problem.
    #
    # Top-level page:
    RewriteCond %{REQUEST_METHOD} !=POST
    RewriteRule ^/$ https://{{apache_https["hostname"]}}%{REQUEST_URI} [R,L]
    # Top-level Runs page:
    RewriteCond %{REQUEST_METHOD} !=POST
    RewriteRule ^/runs/?$ https://{{apache_https["hostname"]}}%{REQUEST_URI} [R,L]
    # Most other sections:
    RewriteCond %{REQUEST_METHOD} !=POST
    RewriteRule ^/(admin|contact|people|workflows) https://{{apache_https["hostname"]}}%{REQUEST_URI} [R,L]    
{%     else %} {#- apache_port == 443 #}
    # Redirect /runs/* to HTTP
    RewriteCond %{REQUEST_METHOD} !=POST
    RewriteRule ^/runs/. http://{{apache_https["hostname"]}}%{REQUEST_URI} [R,L]

    SSLEngine on
    SSLCertificateFile /etc/apache2/ssl/{{apache_https["hostname"]}}.crt
    SSLCertificateKeyFile /etc/apache2/ssl/{{apache_https["hostname"]}}.key
    SSLCertificateChainFile /etc/apache2/ssl/chain.crt
{%     endif %}
{%   endif %}

    # This is the Portal rails app location.
    DocumentRoot {{biovel_portal_install}}/public
    <Directory {{biovel_portal_install}}/public>
        Options -MultiViews
        AllowOverride None
        Order allow,deny
        Allow from all
    </Directory>
    <IfModule expires_module>
        # Ruby on Rails 3 asset pipeline caching
        <Directory {{biovel_portal_install}}/public/assets>
            # This directory contains static assets for the Rails application.
            # See http://guides.rubyonrails.org/asset_pipeline.html#far-future-expires-header
            # ETags are not turned off as suggested in this link, as pages
            # that suggest doing this never seem to provide a good reason.
            #
            # Some pages suggest that there exist browsers that ignore Expires
            # when an ETag is present, but they do not name the browsers.  In
            # any case this is merely less efficient, not incorrect behaviour.
            #
            # Other pages suggest that this is a problem when files are
            # delivered by load balanced web servers, which each use a
            # different ETag for the same file, but this is a general ETag
            # problem, unrelated to its combination with Expires. In any case,
            # it doesn't currently apply to our setup (or to a well-designed
            # load balancing system).
            #
            # On the other hand, keeping the ETag means even the once per day
            # check is efficient, as it typically will not need to download
            # the file.  See the comments at
            # http://www.askapache.com/htaccess/apache-speed-etags.html
            #
            ExpiresActive On
            ExpiresDefault "access plus 1 hour"
            <FilesMatch "-[0-9a-f]{32}\.">
                # Filenames with a 32-digit hexadecimal hash change whenever
                # the contents change, allowing us to cache these files for a
                # longer time
                ExpiresDefault "access plus 1 year"
            </FilesMatch>
        </Directory>
    </IfModule>
 
    ErrorLog {{biovel_portal_log}}/error.log
 
    # Possible values include: debug, info, notice, warn, error, crit,
    # alert, emerg.
    LogLevel warn
 
    CustomLog {{biovel_portal_log}}/access.log combined
</VirtualHost>
{% endfor %}
